IsUnique
	Is there a more efficient way of implementing this method?
	This assumes that every char, both lowercase and uppercase are unique values

CheckPermutation
	I have it completed and done, however I know it can be better, so this is my note to go back and fix the time complexity. 

URLify
	Is there a more efficient way of implementing this method? 

PalindromPermutation
	I left this off in the middle of a brute force solution, one that is brute even for a brute force
	Do a brute force solution in another way
	This assumes that every char, both lowercase and uppercase are unique values

OneAway
	I do have 2 loops here... one to add all the chars to the list and the other to compare the lists... I'm assuming this would be more of a brute solution than not because of that
	Would the efficiency be O(n) because the loops aren't operating in each other? 
	This assumes that every char, both lowercase and uppercase are unique values

StringCompression
	Honestly, in itself, I like this one. 
	An important thing I found worth mentioning to my future self is noting the ASCII table when getting the key and value pair from my dictionary<char, int>. When I called my key, I got the ASCII number (a being 97), and  I added my int value to the ASCII number (for example, if 'a' occured 4 times in my string, it would have been 101 instead of "a4")
		To properly create this string, you need to call the pair as 
			compressed += pair.key.ToString() + pair.value.ToString(); 
			converting the key and value to string allows proper concatentation	
		I didn't see this issue until I wrote the method in VS; I didn't notice this on paper

RotateMatrix

ZeroMatrix